// Generated by CoffeeScript 1.9.1
(function() {
  var popup, ts;

  ts = new TabShepherd(chrome, window.alert);

  popup = angular.module('TabShepPopup', []);

  popup.controller('PopupController', function($scope) {
    $scope.init = function(win) {
      return ts.withCurrentWindow(function(win) {
        var ref;
        $scope.currentWindow = win;
        $scope.name = (ref = ts.getName(win)) != null ? ref : '';
        if ($scope.name) {
          $scope.def = ts.getDefinition($scope.name);
          if (($scope.def != null) && ($scope.def.patterns == null)) {
            $scope.def.patterns = [];
          }
        }
        return ts.countWindowsAndTabs(function(info) {
          $scope.winInfo = info;
          return ts.withInactiveDefinitions(function(defs) {
            $scope.inactiveDefs = defs;
            return $scope.$digest();
          });
        });
      });
    };
    $scope.runCommand = function() {
      var output;
      output = function(msg) {
        $scope.output = msg;
        return $scope.$digest();
      };
      if ($scope.command) {
        return ts.runCommand($scope.command, output);
      }
    };
    $scope.setName = function() {
      return ts.withCurrentWindow(function(win) {
        ts.setName(win, $scope.name);
        ts.storeDefinitions();
        return $scope.init();
      });
    };
    $scope.addPattern = function() {
      $scope.def.patterns.push($scope.newPattern);
      return ts.withCurrentWindow(function(win) {
        ts.assignPattern(win, $scope.newPattern);
        $scope.newPattern = '';
        ts.storeDefinitions();
        return $scope.init();
      });
    };
    $scope.goToWindow = function(id) {
      return ts.withWindow(id - 0, function(win) {
        $scope.currentWindow = win;
        return ts.focus(win);
      });
    };
    $scope.activateDef = function(name) {
      console.log('Activate ' + name);
      ts.activateDefinition(name);
      return $scope.init();
    };
    $scope.removeDef = function(name) {
      console.log('Remove ' + name);
      ts.deleteDefinition(name);
      return $scope.init();
    };
    return $scope.init();
  });

}).call(this);
