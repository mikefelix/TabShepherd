// Generated by CoffeeScript 1.9.1
(function() {
  var TabShepherd, activeTabId, alertText, chrome, defs, focusedWindowId, inputChanged, inputEntered, omniboxText, randomId, suggest, tabValues, tabs, windowRemovedListener, windows,
    hasProp = {}.hasOwnProperty;

  require("./shoulda.js");

  require("./underscore-min.js");

  global.extend = function(hash1, hash2) {
    var key;
    for (key in hash2) {
      hash1[key] = hash2[key];
    }
    hash1;
    return extend(global, require("./chromeStubs.js"));
  };

  TabShepherd = require("./TabShepherd.js").TabShepherd;

  inputChanged = null;

  inputEntered = null;

  windowRemovedListener = null;

  focusedWindowId = null;

  activeTabId = null;

  tabValues = function() {
    return _.values(tabs);
  };

  windows = {};

  tabs = {};

  defs = {};

  omniboxText = '';

  alertText = '';

  suggest = function(text) {
    return omniboxText = text[0].description;
  };

  randomId = function() {
    return Math.floor(Math.random() * 10000);
  };

  chrome = {
    runtime: {
      lastError: null
    },
    storage: {
      local: {
        get: function(name, cb) {
          var res;
          res = {};
          if (name === 'windowDefs') {
            res[name] = defs;
          }
          return cb(res);
        },
        set: function(newDefs, cb) {
          defs = newDefs['windowDefs'];
          return cb();
        }
      }
    },
    omnibox: {
      onInputChanged: {
        addListener: function(listener) {
          return inputChanged = listener;
        }
      },
      onInputEntered: {
        addListener: function(listener) {
          return inputEntered = listener;
        }
      }
    },
    windows: {
      onRemoved: {
        addListener: function(listener) {
          return windowRemovedListener = listener;
        }
      },
      getCurrent: function(cb) {
        return cb(windows[focusedWindowId]);
      },
      create: function(ops, cb) {
        var id, tab, win;
        id = {
          id: randomId()
        };
        tab = {
          url: '',
          id: randomId(),
          windowId: id
        };
        win = {
          id: id,
          tabs: [tab]
        };
        windows[id] = win;
        return cb(win);
      },
      get: function(id, ops, cb) {
        return cb(windows[id]);
      },
      getAll: function(ops, cb) {
        var k, v;
        return cb((function() {
          var results;
          results = [];
          for (k in windows) {
            if (!hasProp.call(windows, k)) continue;
            v = windows[k];
            results.push(v);
          }
          return results;
        })());
      },
      update: function(winId, ops, cb) {
        if (ops != null ? ops.focused : void 0) {
          focusedWindowId = winId;
        }
        return cb();
      }
    },
    tabs: {
      create: function(winId, url, cb) {
        var tab, tabId;
        tabId = randomId();
        tab = {
          url: url,
          id: randomId(),
          windowId: winId
        };
        tabs[tabId] = tab;
        windows[winId].tabs.push(tab);
        return cb(tab);
      },
      query: function(ops, cb) {
        var fits, t;
        fits = function(t) {
          return (!ops.currentWindow || t.windowId === focusedWindowId) && (!ops.active || t.id === activeTabId);
        };
        return cb((function() {
          var i, len, ref, results;
          ref = tabValues();
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            t = ref[i];
            if (fits(t)) {
              results.push(t);
            }
          }
          return results;
        })());
      },
      get: function(id, cb) {
        return cb(tabs[id]);
      },
      getAllInWindow: function(winId, cb) {
        return cb(_.filter(tabValues(), function(t) {
          return t.windowId === winId;
        }));
      },
      update: function(id, ops, cb) {
        var k, tab, v;
        tab = tabs[id];
        for (k in ops) {
          if (!hasProp.call(ops, k)) continue;
          v = ops[k];
          tab[k] = v;
        }
        return cb(tab);
      },
      move: function(ids, ops, cb) {
        var i, id, idx, len, newWin, results, tab, win;
        newWin = windows[ops.windowId];
        results = [];
        for (i = 0, len = ids.length; i < len; i++) {
          id = ids[i];
          win = windows[tab.windowId];
          idx = _.findIndexOf(win.tabs, function(t) {
            return t.id === id;
          });
          win.tabs.splice(idx, 1);
          tab = tabs[id];
          newWin.tabs.push(tab);
          results.push(cb(tab));
        }
        return results;
      },
      remove: function(id, cb) {
        var idx, tab, win;
        tab = tabs[id];
        win = windows[tab.windowId];
        idx = _.findIndexOf(win.tabs, function(t) {
          return t.id === id;
        });
        win.tabs.splice(idx, 1);
        delete tabs[id];
        return cb();
      }
    }
  };

  context("Commands", should("initialize", function() {
    var ts;
    assert.equal('function', typeof TabShepherd);
    ts = new TabShepherd(chrome);
    assert.equal('object', typeof ts);
    assert.isTrue(inputChanged != null);
    return assert.isTrue(inputEntered != null);
  }), should("show help", function() {
    var ts;
    ts = new TabShepherd(chrome);
    inputChanged('help', suggest);
    return assert.equal(omniboxText, 'Get help on a command');
  }));

  Tests.run();

}).call(this);
