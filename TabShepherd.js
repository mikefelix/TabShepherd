// Generated by CoffeeScript 1.9.1
(function() {
  var TabShepherd,
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  TabShepherd = (function() {
    var Command, commands;

    function TabShepherd(storage, omnibox, windows, tabs1) {
      this.storage = storage;
      this.omnibox = omnibox;
      this.windows = windows;
      this.tabs = tabs1;
      this.omnibox.onInputChanged.addListener((function(_this) {
        return function(text, suggest) {
          var c;
          c = new Command(_this, text, function(res) {
            if (res) {
              return suggest([
                {
                  content: ' ',
                  description: res
                }
              ]);
            }
          });
          return c.help();
        };
      })(this));
      this.omnibox.onInputEntered.addListener((function(_this) {
        return function(text) {
          var c;
          c = new Command(_this, text, function(res) {
            if (res) {
              return alert(res);
            }
          });
          return c.run();
        };
      })(this));
      this.storage.get('windowDefs', (function(_this) {
        return function(data) {
          var defMatchesWin;
          defMatchesWin = function(def, win, tabs) {
            return def.id === win.id || (tabs[0] && def.firstUrl === tabs[0].url);
          };
          return _this.windows.getAll({}, function(wins) {
            var j, len, results, win;
            results = [];
            for (j = 0, len = wins.length; j < len; j++) {
              win = wins[j];
              results.push(_this.tabs.getAllInWindow(win.id, function(tabs) {
                var def, defName, ref, results1;
                ref = data['windowDefs'];
                results1 = [];
                for (defName in ref) {
                  if (!hasProp.call(ref, defName)) continue;
                  def = ref[defName];
                  if (!(defMatchesWin(def, win, tabs))) {
                    continue;
                  }
                  win.name = defName;
                  results1.push(win.def = def);
                }
                return results1;
              }));
            }
            return results;
          });
        };
      })(this));
    }

    commands = {
      n: {
        alias: 'name'
      },
      name: {
        desc: 'Change the name of the current window definition',
        type: 'Managing window definitions',
        examples: {
          'ts name awesome': "Create a definition for the current window named 'awesome'."
        },
        help: function() {
          var newName;
          newName = this.args[0];
          return this.withCurrentWindow((function(_this) {
            return function(win) {
              if (win.name != null) {
                if (newName != null) {
                  return _this.finish("Press enter to change name window name from '%s' to '%s'.", win.name, newName);
                } else {
                  return _this.finish("Enter a new name for this window (currently named '%s').", win.name);
                }
              } else {
                if (newName != null) {
                  return _this.finish("Press enter to name this window '%s'.", newName);
                } else {
                  return _this.finish('Enter a name for this window.');
                }
              }
            };
          })(this));
        },
        run: function() {
          var name;
          name = this.args[0];
          if (!name) {
            return this.finish('No name provided.');
          }
          return this.withCurrentWindow((function(_this) {
            return function(win) {
              _this.setName(win, name);
              return _this.finish();
            };
          })(this));
        }
      },
      attach: {
        desc: 'Attach the current window to a previously defined window definition',
        type: 'Managing window definitions',
        examples: {
          'ts attach work': 'Attach the current window to the existing window definition called \'work\'.'
        },
        help: function() {
          return this.withCurrentWindow((function(_this) {
            return function(win) {};
          })(this));
        },
        run: function() {
          return this.withCurrentWindow((function(_this) {
            return function(win) {};
          })(this));
        }
      },
      defs: {
        desc: 'List named window definitions',
        type: 'Managing window definitions',
        examples: {
          'ts defs': 'List all the window definitions that exist.'
        },
        help: function() {
          return this.finish('Press enter to list the window definitions.');
        },
        run: function() {
          var msg;
          msg = '';
          return this.forEachDefinition({
            run: (function(_this) {
              return function(def, win, name) {
                return msg += name + ' (' + (win ? 'window ' + win.id : 'no attached window') + ')\n';
              };
            })(this),
            then: (function(_this) {
              return function() {
                return _this.finish('Named windows:\n\n%s', msg);
              };
            })(this)
          });
        }
      },
      "new": {
        desc: 'Create a new empty window and assign it a definition',
        type: 'Managing window definitions',
        examples: {
          'ts new cats': 'Create a new window with definition named \'cats\'.',
          'ts new cats \\bcats?\\b': 'Create a new window with definition named \'cats\' and containing one pattern. Move no tabs.'
        },
        help: function() {
          var name;
          name = this.args[0];
          if (!name) {
            return this.finish('Enter a name for the new window.');
          }
          return this.withWindowNamed(name, (function(_this) {
            return function(win) {
              if (win != null) {
                return _this.finish('There is already a window named \'%s\'.', name);
              } else {
                return _this.finish('Press enter to open a new window and name it \'%s\'.', name);
              }
            };
          })(this));
        },
        run: function() {
          var name;
          name = this.args[0];
          if (!name) {
            return this.finish('No window name provided.');
          }
          return this.withWindowNamed(name, (function(_this) {
            return function(win) {
              if (win) {
                return _this.finish('There is already a window named \'%s\'.', name);
              }
              return _this.withNewWindow(name, function() {
                return _this.finish();
              });
            };
          })(this));
        }
      },
      clear: {
        desc: 'Clear window definitions',
        type: 'Managing window definitions',
        examples: {
          'ts clear recipes': 'Remove the window definition \'recipes\'. No tabs are affected.',
          'ts clear all data': 'Remove all window definitions from storage. No tabs are affected.'
        },
        help: function() {
          var name;
          name = this.args[0];
          if (name === 'all data') {
            return finish('Press enter to clear all saved window definitions.');
          }
          return this.withWindowNamed(name, (function(_this) {
            return function(win) {
              if (win != null) {
                return _this.finish('Press enter to clear window definition \'%s\'. Warning: currently assigned to a window.', name);
              } else if (definitions[name]) {
                return _this.finish('Press enter to clear window definition \'%s\', not currently assigned to a window.', name);
              } else {
                return _this.finish('Window definition \'%s\' not found.', name);
              }
            };
          })(this));
        },
        run: function() {
          var name;
          name = this.args[0];
          if (name === 'all data') {
            this.storage.remove('windows', (function(_this) {
              return function() {
                return _this.finish('Cleared all window data.');
              };
            })(this));
          }
          return this.withWindowNamed(name, (function(_this) {
            return function(win) {
              if (win != null) {
                delete definitions[name];
                delete win.name;
                return _this.finish('Cleared window definition \'%s\' and removed it from a window.', name);
              } else if (definitions[name] != null) {
                delete definitions[name];
                return _this.finish('Cleared window definition \'%s\'.', name);
              } else {
                return _this.finish('Window definition \'%s\' not found.', name);
              }
            };
          })(this));
        }
      },
      clean: {
        desc: 'Clean window data, removing definitions for which no window is present',
        type: 'Managing window definitions',
        examples: {
          'ts clean': 'Clean window data, removing definitions for which no window is present. No tabs are affected.'
        },
        help: function() {
          return this.forEachDefinition({
            where: function(def, win) {
              return !win;
            },
            run: function(def, win, name) {
              return "'" + name + "'";
            },
            then: function(msg) {
              return this.finish(msg ? 'Press enter to clean unused window definitions: ' + msg : 'No window definitions need cleaning.');
            }
          });
        },
        run: function() {
          return this.forEachDefinition({
            where: function(def, win) {
              return !win;
            },
            run: (function(_this) {
              return function(def, win, name) {
                delete _this.definitions[name];
                return "'" + name + "'";
              };
            })(this),
            then: function(msg) {
              return this.finish(msg ? 'Cleaned unused window definitions: ' + msg : 'No window definitions needed cleaning.');
            }
          });
        }
      },
      unnamed: {
        desc: 'Go to a window having no definition',
        type: 'Managing window definitions',
        examples: {
          'ts unnamed': 'Find a window with no definition if such exists, and focus it; else do nothing.'
        },
        help: function() {
          return this.withWindow((function(win) {
            return win.name == null;
          }), (function(_this) {
            return function(win) {
              if (win != null) {
                return _this.finish('Press enter to go to an open window that has no definition.');
              } else {
                return _this.finish('All windows have a definition.');
              }
            };
          })(this));
        },
        run: function() {
          return this.withWindow((function(win) {
            return win.name == null;
          }), (function(_this) {
            return function(win) {
              if (win) {
                focus(win);
              }
              return _this.finish();
            };
          })(this));
        }
      },
      focus: {
        desc: 'Switch to the window with the given name',
        type: 'Changing focus',
        examples: {
          'ts focus work': "Focus the window named 'work'."
        },
        help: function() {
          var name;
          name = this.args[0];
          if (!this.getDefinition(name)) {
            return this.finish('Type a defined window name.');
          } else {
            return this.finish("Press enter to focus window '%s'.", name);
          }
        },
        run: function() {
          var name;
          name = this.args[0];
          if (!this.getDefinition(name)) {
            return this.finish("No such window '%s'.", name);
          } else {
            return this.withWindowNamed(name, (function(_this) {
              return function(win) {
                if (win == null) {
                  return _this.finish("Window not found: '%s'.", name);
                } else {
                  _this.focus(win);
                  return _this.finish();
                }
              };
            })(this));
          }
        }
      },
      f: {
        alias: 'find'
      },
      go: {
        alias: 'find'
      },
      find: {
        desc: 'Go to the first tab found matching a pattern.',
        type: 'Changing focus',
        examples: {
          'ts find google.com': 'Focus the first tab found to match /google.com/.'
        },
        help: function() {
          var pattern;
          pattern = this.args[0];
          return this.withTabsMatching(pattern, (function(_this) {
            return function(matchingTabs) {
              if (matchingTabs.length > 1) {
                return _this.finish('Press enter to focus the first of %s tabs matching /%s/.', matchingTabs.length, pattern);
              } else if (matchingTabs.length === 1) {
                return _this.finish('Press enter to focus the tab matching /%s/.', pattern);
              } else {
                return _this.finish('No matching tabs found for /%s/.', pattern);
              }
            };
          })(this));
        },
        run: function() {
          var pattern;
          pattern = this.args[0];
          return this.withTabsMatching(pattern, (function(_this) {
            return function(matchingTabs) {
              if (matchingTabs.length >= 1) {
                return _this.tabs.get(matchingTabs[0], function(tab) {
                  return _this.windows.update(tab.windowId, {
                    focused: true
                  }, function() {
                    return _this.tabs.update(tab.id, {
                      highlighted: true
                    }, function() {});
                  });
                });
              } else {
                return _this.finish("No matching tabs found for /" + pattern + "/.");
              }
            };
          })(this));
        }
      },
      b: {
        alias: 'bring'
      },
      bring: {
        desc: 'Bring tabs matching a pattern to the current window',
        type: 'Moving tabs',
        examples: {
          'ts bring cute.*bunnies.com': 'Bring tabs whose URLs match the given pattern (e.g. cutewhitebunnies.com and cutefluffybunnies.com) to the current window.',
          'ts bring': 'Bring tabs whose URLs match all this window\'s assigned patterns to this window.'
        },
        help: function() {
          return this.withCurrentWindow((function(_this) {
            return function(win) {
              var def, patterns;
              patterns = void 0;
              if (_this.args.length > 0) {
                patterns = _this.args;
              } else {
                def = _this.getDefinition(win.name);
                if (!((def != null) && (def.patterns != null) && def.patterns.length === 0)) {
                  _this.finish('Enter one or more patterns. No assigned patterns exist for this window.');
                } else {
                  patterns = def.patterns;
                }
              }
              return _this.withTabsMatching(patterns, function(matchingTabs) {
                var name, num;
                num = matchingTabs.length;
                if (num < 1) {
                  return _this.finish('No tabs found matching given pattern(s).');
                } else {
                  name = win.name ? "'" + win.name + "'" : '';
                  return _this.finish('Press enter to bring %s tabs matching %s pattern(s) to this window%s, or enter different patterns.', num, patterns.length, name);
                }
              });
            };
          })(this));
        },
        run: function() {
          return this.withCurrentWindow((function(_this) {
            return function(win) {
              var def, noneMsg, patterns;
              patterns = void 0;
              noneMsg = 'Error';
              if (_this.args.length > 0) {
                noneMsg = 'No tabs found matching %s given pattern%s:\n\n%s';
                patterns = _this.args;
              } else {
                def = _this.getDefinition(win.name);
                if (!def || !def.patterns || def.patterns.length === 0) {
                  _this.finish('No patterns entered and this window has no assigned patterns.');
                } else {
                  noneMsg = 'No tabs found matching %s assigned pattern%s:\n\n%s';
                  patterns = def.patterns;
                }
              }
              return _this.withTabsMatching(patterns, function(matchingTabs) {
                if (matchingTabs.length < 1) {
                  return this.finish(noneMsg, patterns.length, (patterns.length === 1 ? '' : 's'), this.mkString(patterns, '\n'));
                } else {
                  return this.tabs.move({
                    windowId: win.id,
                    index: -1
                  }, (function(_this) {
                    return function() {
                      return _this.finish();
                    };
                  })(this));
                }
              });
            };
          })(this));
        }
      },
      s: {
        alias: 'send'
      },
      send: {
        desc: 'Send the current tab to the window named in the argument',
        type: 'Moving tabs',
        examples: {
          'ts send research': 'Send the current tab to the window named \'research\'.'
        },
        help: function() {
          var name, win;
          name = this.args[0];
          if (name == null) {
            return this.finish('Enter a window name to send this tab there.');
          } else {
            win = this.getDefinition(name);
            return this.finish('Press enter to send this tab to %swindow \'%s\'.', (win != null ? '' : 'new '), name);
          }
        },
        run: function() {
          var name;
          name = this.args[0];
          return this.withActiveTab((function(_this) {
            return function(tab) {
              var existingWin;
              existingWin = _this.getDefinition(name);
              if (existingWin != null) {
                return _this.tabs.move(tab.id, {
                  windowId: existingWin.id,
                  index: -1
                });
              } else {
                return _this.withNewWindow(name, function(win) {
                  this.tabs.move(tab.id, {
                    windowId: win.id,
                    index: -1
                  }, (function(_this) {
                    return function() {};
                  })(this));
                  return this.tabs.remove(win.tabs[win.tabs.length - 1].id, (function(_this) {
                    return function() {
                      return _this.finish();
                    };
                  })(this));
                });
              }
            };
          })(this));
        }
      },
      o: {
        alias: 'open'
      },
      open: {
        desc: 'Open a URL or search in a different window',
        type: 'Moving tabs',
        examples: {
          'ts open work google.com': 'Opens the URL \'http://google.com\' in the window \'work\'.'
        },
        help: function() {
          var name, url, win;
          name = this.args[0];
          url = this.args[1];
          if (!((name != null) && (url != null))) {
            return this.finish('Enter a window name followed by a URL to open the URL there.');
          } else {
            win = this.getDefinition(name);
            return this.finish('Press enter to open this URL in %swindow \'%s\'.', (win ? '' : 'new '), name);
          }
        },
        run: function() {
          var name, openTab, url;
          name = this.args[0];
          url = this.args[1];
          if (!name || !url) {
            return this.finish('Enter a window name followed by a URL.');
          }
          openTab = (function(_this) {
            return function(win) {
              if (!/^http:\/\//.test(url)) {
                url = 'http://' + url;
              }
              return _this.tabs.create({
                windowId: win.id,
                url: url
              }, function() {
                return _this.finish();
              });
            };
          })(this);
          return this.withWindowNamed(name, (function(_this) {
            return function(existingWin) {
              if (existingWin != null) {
                return openTab(existingWin);
              } else {
                return _this.withNewWindow(name, function(win) {
                  return openTab(win);
                });
              }
            };
          })(this));
        }
      },
      e: {
        alias: 'extract'
      },
      ex: {
        alias: 'extract'
      },
      extract: {
        desc: 'Extract tabs matching the pattern argument into a new window named with that pattern',
        type: 'Moving tabs',
        examples: {
          'ts extract social facebook.com twitter.com': "Create a new window, give it a definition named 'social', assign patterns /facebook.com/ and /twitter.com/ to that definition, and move all tabs whose URLs match the patterns there. This is effectively \"ts new social\", followed by \"ts assign facebook.com twitter.com\", then \"ts bring\". "
        },
        help: function() {
          var name, patterns;
          if (this.args.length === 0) {
            return this.finish('Enter a name or pattern.');
          } else {
            name = this.args[0];
            patterns = this.args.length === 1 ? [this.args[0]] : this.args.slice(1);
            return this.withTabsMatching(patterns, (function(_this) {
              return function(matchingTabs) {
                var num;
                num = matchingTabs.length;
                if (num < 1) {
                  return _this.finish('No tabs found matching the given pattern(s).');
                } else {
                  return _this.finish("Press enter to extract %s tab(s) matching /%s/%s into a new window named '%s'.", num, patterns[0], (patterns.length > 1 ? ', ...' : ''), name);
                }
              };
            })(this));
          }
        },
        run: function() {
          var name, patterns;
          if (this.args.length === 0) {
            return this.finish('Enter a name or pattern.');
          } else {
            name = this.args[0];
            patterns = this.args.length === 1 ? [this.args[0]] : this.args.slice(1);
            return this.withTabsMatching(patterns, (function(_this) {
              return function(matchingTabs) {
                if (matchingTabs.length < 1) {
                  return _this.finish('No tabs found matching the given pattern(s).');
                } else {
                  return _this.withNewWindow(name, function(win) {
                    return this.tabs.move(matchingTabs, {
                      windowId: win.id,
                      index: -1
                    }, (function(_this) {
                      return function() {
                        win.name = name;
                        win.patterns = patterns;
                        return _this.tabs.remove(win.tabs[win.tabs.length - 1].id, function() {
                          return _this.finish();
                        });
                      };
                    })(this));
                  });
                }
              };
            })(this));
          }
        }
      },
      sort: {
        desc: 'Sort all tabs into windows by assigned patterns',
        type: 'Moving tabs',
        examples: {
          'ts sort': 'Move all tab that matches a defined pattern to that pattern\'s window. Effectively, perform "ts bring" for each window.'
        },
        help: function() {
          return this.finish('Press enter to sort all windows according to their assigned regexes.');
        },
        run: function() {}
      },
      merge: {
        desc: 'Merge all the tabs from a window into this window.',
        type: 'Moving tabs',
        examples: {
          'ts merge restaurants': 'Move all the tabs from the window \'restaurants\' into the current window and remove the \'restaurants\' definition.'
        },
        help: function() {},
        run: function() {}
      },
      assign: {
        desc: 'Assign a pattern to the current window',
        type: 'Managing URL patterns',
        examples: {
          'ts assign reddit.com': 'Add /reddit.com/ to this window\'s assigned patterns. No tabs are affected.'
        },
        help: function() {
          var pattern;
          pattern = this.args[0];
          if (pattern == null) {
            return this.finish('Enter a pattern to assign to this window.');
          } else {
            return this.withWindowForPattern(pattern, (function(_this) {
              return function(currWin) {
                if (currWin != null) {
                  return _this.finish('Press enter to reassign /%s/ to this window from window \'%s\'.', pattern, currWin.name);
                } else {
                  return _this.finish('Press enter to assign /%s/ to this window.', pattern);
                }
              };
            })(this));
          }
        },
        run: function() {
          var pattern;
          pattern = this.args[0];
          if (pattern == null) {
            return this.finish('No pattern provided.');
          } else {
            return this.withCurrentWindow(function(window) {
              return this.withWindowForPattern(pattern, function(currWin) {
                var msg;
                msg = void 0;
                if (currWin != null) {
                  if (this.unassignPattern(pattern, currWin)) {
                    msg = this.makeText('Pattern /%s/ was moved from window \'%s\' to window \'%s\'.', pattern, currWin.name, window.name);
                  } else {
                    this.finish('Could not unassign pattern %s from window %s.', pattern, currWin.name);
                  }
                }
                if (this.assignPattern(pattern, window)) {
                  return this.finish(msg);
                } else {
                  return this.finish('Could not assign pattern %s to window %s.', pattern, window.name);
                }
              });
            });
          }
        }
      },
      unassign: {
        desc: 'Remove a pattern assignment from the current window',
        type: 'Managing URL patterns',
        examples: {
          'ts unassign reddit.com': 'Remove /reddit.com/ from this window\'s patterns if it is assigned. No tabs are affected.'
        },
        help: function() {
          var pattern;
          pattern = this.args[0];
          if (pattern == null) {
            return this.finish('Enter a pattern to remove from this window.');
          } else if (!this.containsPattern(pattern, window)) {
            return this.finish('Pattern /%s/ is not assigned to this window.', pattern);
          } else {
            return this.finish('Press enter to remove /%s/ from this window.', pattern);
          }
        },
        run: function() {
          if (typeof pattern === "undefined" || pattern === null) {
            return this.finish('No pattern provided.');
          } else if (!this.containsPattern(pattern, window)) {
            return this.finish('Pattern /%s/ is not assigned to this window.');
          } else {
            return this.withCurrentWindow((function(_this) {
              return function(window) {
                if (_this.unassignPattern(pattern, window)) {
                  return _this.finish();
                } else {
                  return _this.finish('Could not unassign pattern %s from window %s.', pattern, window.name);
                }
              };
            })(this));
          }
        }
      },
      patterns: {
        desc: 'List patterns assigned to the current window definition',
        type: 'Managing URL patterns',
        examples: {
          'ts patterns': 'List patterns assigned to the current window.'
        },
        help: function() {
          return this.finish('Press enter to list the patterns assigned to this window.');
        },
        run: function() {
          return this.withCurrentWindow((function(_this) {
            return function(window) {
              return _this.finish('Patterns assigned to window \'%s\':\n\n%s', window.name, _this.listPatterns(window));
            };
          })(this));
        }
      },
      help: {
        desc: 'Get help on a command',
        type: 'Help',
        examples: {
          'ts help bring': 'Show the usage examples for the "bring" command.'
        },
        help: function(arg) {
          if (!arg || !commands[arg] || arg === 'help') {
            return this.finish(this.summarizeCommands(false));
          } else {
            return this.finish(arg + ': ' + this.getCommand(arg).desc);
          }
        },
        run: function(arg) {
          return this.finish(this.summarizeCommands(arg));
        }
      }
    };

    Command = (function() {
      function Command(ts, text, output) {
        this.exec = bind(this.exec, this);
        this.help = bind(this.help, this);
        this.run = bind(this.run, this);
        this.finish = bind(this.finish, this);
        this.storeDefinitions = bind(this.storeDefinitions, this);
        this.close = bind(this.close, this);
        this.forEachDefinition = bind(this.forEachDefinition, this);
        this.forEachWindow = bind(this.forEachWindow, this);
        this.withTabsMatching = bind(this.withTabsMatching, this);
        this.listPatterns = bind(this.listPatterns, this);
        this.containsPattern = bind(this.containsPattern, this);
        this.unassignPattern = bind(this.unassignPattern, this);
        this.assignPattern = bind(this.assignPattern, this);
        this.withWindowForPattern = bind(this.withWindowForPattern, this);
        this.getDefForPattern = bind(this.getDefForPattern, this);
        this.withCurrentWindow = bind(this.withCurrentWindow, this);
        this.withWindowNamed = bind(this.withWindowNamed, this);
        this.withWindow = bind(this.withWindow, this);
        this.withNewWindow = bind(this.withNewWindow, this);
        this.withActiveTab = bind(this.withActiveTab, this);
        this.getName = bind(this.getName, this);
        this.setName = bind(this.setName, this);
        this.getDefinition = bind(this.getDefinition, this);
        this.focus = bind(this.focus, this);
        this.getId = bind(this.getId, this);
        this.makeText = bind(this.makeText, this);
        this.summarizeCommands = bind(this.summarizeCommands, this);
        this.showExamples = bind(this.showExamples, this);
        this.getCommand = bind(this.getCommand, this);
        this.getArgs = bind(this.getArgs, this);
        this.storage = ts.storage;
        this.omnibox = ts.omnibox;
        this.windows = ts.windows;
        this.tabs = ts.tabs;
        this.cmd = this.getCommand(text);
        this.args = this.getArgs(text);
        this.output = output;
      }

      Command.prototype.getArgs = function(text) {
        text = text.trim();
        if (!/^\w+\s+\w+/.test(text)) {
          return [];
        }
        return text.replace(/^\w+\s+/, '').split(/\s+/);
      };

      Command.prototype.getCommand = function(text) {
        var idx, name;
        idx = text ? text.indexOf(' ') : -1;
        name = idx === -1 ? text : text.substring(0, idx);
        if (commands[name]) {
          if (commands[name]['alias']) {
            return commands[commands[name]['alias']];
          } else {
            return commands[name];
          }
        } else {
          return commands['help'];
        }
      };

      Command.prototype.showExamples = function(cmd) {
        var command, ex, examples, msg;
        if (commands[cmd] == null) {
          return '';
        }
        msg = '"' + cmd + '": ' + commands[cmd].desc + '.\n\nExamples:\n\n';
        command = commands[cmd];
        examples = command.examples;
        for (ex in examples) {
          msg += ex + "\n  " + examples[ex] + "\n\n";
        }
        return msg;
      };

      Command.prototype.summarizeCommands = function(full) {
        var cmd, j, len, msg, name, type, types;
        msg = '';
        if (full && full !== true) {
          return this.showExamples(full);
        }
        if (full) {
          msg += 'Syntax: ts <command> <arguments>\n\n';
        }
        msg += 'Possible commands:' + (full ? '\n' : ' ');
        types = ['Moving tabs', 'Changing focus', 'Managing window definitions', 'Managing URL patterns', 'Help'];
        for (j = 0, len = types.length; j < len; j++) {
          type = types[j];
          if (full) {
            msg += "  " + type + ":\n";
          }
          for (name in commands) {
            if (!hasProp.call(commands, name)) continue;
            cmd = commands[name];
            if (cmd.type === type) {
              if (full) {
                msg += "    " + name + ": " + cmd.desc + ".\n";
              } else {
                msg += name + ' ';
              }
            }
          }
        }
        return msg;
      };

      Command.prototype.makeText = function(arr) {
        var a, j, len, ref, results;
        if (arr.length === 0) {
          return void 0;
        }
        if (arr.length === 1) {
          return arr[0];
        }
        ref = arr.slice(1);
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          a = ref[j];
          results.push(a.replace('%s', a));
        }
        return results;
      };

      Command.prototype.getId = function(win) {
        if (typeof win === 'number') {
          return win;
        } else if (typeof win === 'object') {
          return win.id;
        } else {
          return alert("Can't find id from " + typeof win);
        }
      };

      Command.prototype.focus = function(win) {
        return this.windows.update(win.id, {
          focused: true
        }, (function(_this) {
          return function() {};
        })(this));
      };

      Command.prototype.getDefinition = function(name) {
        return this.definitions[name];
      };

      Command.prototype.setName = function(win, name) {
        delete this.definitions[win.name];
        this.definitions[name] = {
          id: win.id
        };
        win.name = name;
        return win.def = this.definitions[name];
      };

      Command.prototype.getName = function(win) {
        var id, name, ref;
        id = this.getId(win);
        ref = this.definitions;
        for (name in ref) {
          if (!hasProp.call(ref, name)) continue;
          if (this.definitions[name].id === id) {
            return name;
          }
        }
        return void 0;
      };

      Command.prototype.withActiveTab = function(callback) {
        return this.tabs.query({
          active: true,
          currentWindow: true
        }, (function(_this) {
          return function(tabs) {
            return callback(tabs[0]);
          };
        })(this));
      };

      Command.prototype.withNewWindow = function(name, callback) {
        var definitions;
        definitions = this.definitions;
        return this.windows.create({
          type: 'normal'
        }, (function(_this) {
          return function(win) {
            definitions[name] = {
              id: win.id
            };
            win.name = name;
            return callback(win);
          };
        })(this));
      };

      Command.prototype.withWindow = function(test, callback) {
        return this.windows.getAll({}, (function(_this) {
          return function(wins) {
            var j, len, win;
            for (j = 0, len = wins.length; j < len; j++) {
              win = wins[j];
              if (test(win)) {
                return callback(win);
              }
            }
          };
        })(this));
      };

      Command.prototype.withWindowNamed = function(name, callback) {
        var def;
        def = this.getDefinition(name);
        if (!def) {
          return callback();
        }
        return this.windows.get(def.id, {}, (function(_this) {
          return function(w) {
            if (w) {
              w.name = name;
              w.def = def;
            }
            return callback(w);
          };
        })(this));
      };

      Command.prototype.withCurrentWindow = function(callback) {
        return this.windows.getCurrent({}, (function(_this) {
          return function(win) {
            win.name = _this.getName(win);
            return callback(win);
          };
        })(this));
      };

      Command.prototype.getDefForPattern = function(pattern) {
        var def, j, len, name, ref, ref1;
        ref = this.definitions;
        for (name in ref) {
          if (!hasProp.call(ref, name)) continue;
          def = ref[name];
          if (def.patterns) {
            ref1 = def.patterns;
            for (j = 0, len = ref1.length; j < len; j++) {
              pattern = ref1[j];
              if (pattern === def.patterns[i]) {
                return def;
              }
            }
          }
        }
      };

      Command.prototype.withWindowForPattern = function(pattern, callback) {
        var def;
        def = this.getDefForPattern(pattern);
        if (def == null) {
          return callback();
        }
        if (def.id == null) {
          return alert("Definition " + def + " found for pattern " + pattern + " but it has no assigned window.");
        } else {
          return this.windows.get(def.id, {}, (function(_this) {
            return function(w) {
              w.def = def;
              return callback(w);
            };
          })(this));
        }
      };

      Command.prototype.assignPattern = function(pattern, win) {
        var def, name;
        name = win.name;
        if (name == null) {
          alert('Window has no name!');
          return false;
        }
        if (this.definitions[name] == null) {
          alert("Window " + name + " has no definition!");
          return false;
        }
        def = this.definitions[name];
        if (def.patterns == null) {
          def.patterns = [];
        }
        def.patterns.push(pattern);
        return true;
      };

      Command.prototype.unassignPattern = function(pattern, window) {
        var def, i;
        if (window.name == null) {
          alert('Window has no name.');
          return false;
        }
        def = this.definitions[window.name];
        if (def == null) {
          alert('No definition found for name ' + window.name);
          return false;
        }
        if (def.patterns == null) {
          alert('No patterns found in window ' + window.name);
          return false;
        }
        i = 0;
        while (i < def.patterns.length) {
          if (def.patterns[i] === pattern) {
            def.patterns.splice(i, 1);
            return true;
          }
          i++;
        }
        alert("Could not delete pattern " + pattern + " from window '" + window.name + "'.");
        return false;
      };

      Command.prototype.containsPattern = function(pattern) {
        var j, len, regex, regexes;
        if (!this.definitions[window.name]) {
          alert('Unknown window ' + window.name);
        }
        regexes = this.definitions[window.name].regexes;
        if (!regexes) {
          return false;
        }
        for (j = 0, len = regexes.length; j < len; j++) {
          regex = regexes[j];
          if (regex === pattern) {
            return true;
          }
        }
        return false;
      };

      Command.prototype.listPatterns = function(window) {
        var def, j, len, patt, patterns, results;
        def = this.definitions[window.name];
        if (!def) {
          return '';
        }
        patterns = def.patterns || [];
        results = [];
        for (j = 0, len = patterns.length; j < len; j++) {
          patt = patterns[j];
          results.push("/" + patt + "/\n");
        }
        return results;
      };

      Command.prototype.withTabsMatching = function(patterns, callback) {
        var matches;
        if (!patterns) {
          return callback([]);
        }
        if (typeof patterns === 'string') {
          patterns = [patterns];
        }
        if (patterns.length === 0 || patterns[0] === '') {
          return callback([]);
        }
        matches = function(tab) {
          var j, len, p, r;
          for (j = 0, len = patterns.length; j < len; j++) {
            p = patterns[j];
            if (/^\/.*\/$/.test(p)) {
              r = new RegExp(p);
              if (r.test(tab.url) || r.test(tab.title)) {
                return true;
              }
            } else if (/[*+?{}\[\]]/.test(p)) {
              r = new RegExp('/' + p.replace(/\//, '\\/') + '/i');
              if (r.test(tab.url) || r.test(tab.title)) {
                return true;
              }
            } else {
              if (tab.url.toLowerCase().search(p) > -1 || tab.title.toLowerCase().search(p) > -1) {
                return true;
              }
            }
          }
          return false;
        };
        return this.tabs.query({
          pinned: false,
          status: 'complete',
          windowType: 'normal'
        }, (function(_this) {
          return function(tabs) {
            var matchingTabs, tab;
            matchingTabs = (function() {
              var j, len, results;
              results = [];
              for (j = 0, len = tabs.length; j < len; j++) {
                tab = tabs[j];
                if (matches(tab)) {
                  results.push(tab.id);
                }
              }
              return results;
            })();
            return callback(matchingTabs);
          };
        })(this));
      };

      Command.prototype.forEachWindow = function(args) {
        var action, condition, finish;
        condition = args.where || function() {
          return true;
        };
        action = args.run;
        finish = args.then;
        return this.windows.getAll({}, (function(_this) {
          return function(wins) {
            var def, j, len, msgs, win;
            def = _this.definitions[win.name];
            for (j = 0, len = wins.length; j < len; j++) {
              win = wins[j];
              if (condition(win, def, win.name)) {
                msgs = action(win, def, win.name);
              }
            }
            return finish(msgs.join(','));
          };
        })(this));
      };

      Command.prototype.forEachDefinition = function(args) {
        var action, condition, finish;
        condition = args.where || function() {
          return true;
        };
        action = args.run;
        finish = args.then;
        return this.windows.getAll({}, (function(_this) {
          return function(wins) {
            var def, findWin, msgs, name, win;
            findWin = function(defName) {
              var j, len, win;
              for (j = 0, len = wins.length; j < len; j++) {
                win = wins[j];
                if (win.name === defName) {
                  return win;
                }
              }
              return void 0;
            };
            msgs = (function() {
              var ref, results;
              ref = this.definitions;
              results = [];
              for (name in ref) {
                if (!hasProp.call(ref, name)) continue;
                def = ref[name];
                win = findWin(name);
                if (condition(def, win, name)) {
                  results.push(msgs.push(action(def, win, name)));
                } else {
                  results.push(void 0);
                }
              }
              return results;
            }).call(_this);
            if (finish) {
              return finish(msgs.join(','));
            }
          };
        })(this));
      };

      Command.prototype.close = function() {
        return this.forEachDefinition({
          run: function(def, win) {
            if (win) {
              return this.tabs.query({
                index: 0,
                windowId: win.id
              }, (function(_this) {
                return function(tab) {
                  return def.firstUrl = tab.url;
                };
              })(this));
            }
          },
          then: function() {
            return this.storeDefinitions();
          }
        });
      };

      Command.prototype.storeDefinitions = function() {
        console.dir(this.definitions);
        return this.storage.set({
          windowDefs: this.definitions
        }, (function(_this) {
          return function() {
            if (chrome.runtime.lastError) {
              return alert(chrome.runtime.lastError);
            }
          };
        })(this));
      };

      Command.prototype.finish = function() {
        var status;
        status = this.makeText(arguments);
        this.output(status);
        if (this.saveData) {
          return this.close();
        }
      };

      Command.prototype.run = function() {
        this.saveData = true;
        return this.exec(this.cmd.run);
      };

      Command.prototype.help = function() {
        this.saveData = false;
        return this.exec(this.cmd.help);
      };

      Command.prototype.exec = function(f) {
        return this.storage.get('windowDefs', (function(_this) {
          return function(data) {
            _this.definitions = data['windowDefs'] || {};
            return f.apply(_this, _this.args);
          };
        })(this));
      };

      return Command;

    })();

    return TabShepherd;

  })();

  new TabShepherd(chrome.storage.local, chrome.omnibox, chrome.windows, chrome.tabs);

}).call(this);
